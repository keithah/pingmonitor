name: Build and Release PingMonitor

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

env:
  PRODUCT_NAME: "PingMonitor"
  BUNDLE_ID: "com.pingmonitor.app"

jobs:
  build-and-release:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        fi

    - name: Create app bundle structure
      run: |
        mkdir -p "$PRODUCT_NAME.app/Contents/MacOS"
        mkdir -p "$PRODUCT_NAME.app/Contents/Resources"

    - name: Create Info.plist
      run: |
        cat > "$PRODUCT_NAME.app/Contents/Info.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleDevelopmentRegion</key>
            <string>en</string>
            <key>CFBundleExecutable</key>
            <string>$PRODUCT_NAME</string>
            <key>CFBundleIconFile</key>
            <string>AppIcon</string>
            <key>CFBundleIdentifier</key>
            <string>$BUNDLE_ID</string>
            <key>CFBundleInfoDictionaryVersion</key>
            <string>6.0</string>
            <key>CFBundleName</key>
            <string>$PRODUCT_NAME</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>${{ steps.version.outputs.VERSION }}</string>
            <key>CFBundleVersion</key>
            <string>${{ steps.version.outputs.VERSION }}</string>
            <key>LSMinimumSystemVersion</key>
            <string>13.0</string>
            <key>LSUIElement</key>
            <true/>
            <key>NSPrincipalClass</key>
            <string>NSApplication</string>
            <key>NSHighResolutionCapable</key>
            <true/>
            <key>NSSupportsAutomaticGraphicsSwitching</key>
            <true/>
            <key>NSRequiresAquaSystemAppearance</key>
            <false/>
        </dict>
        </plist>
        EOF

    - name: Create entitlements file
      run: |
        cat > "entitlements.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>com.apple.security.app-sandbox</key>
            <true/>
            <key>com.apple.security.network.client</key>
            <true/>
            <key>com.apple.security.files.user-selected.read-write</key>
            <true/>
            <key>com.apple.security.cs.allow-jit</key>
            <false/>
            <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
            <false/>
            <key>com.apple.security.cs.disable-executable-page-protection</key>
            <false/>
        </dict>
        </plist>
        EOF

    - name: Compile Swift application
      run: |
        swiftc PingMonitor.swift -o "$PRODUCT_NAME.app/Contents/MacOS/$PRODUCT_NAME" \
          -target arm64-apple-macos13.0 \
          -Osize

    - name: Import signing certificate (if available)
      if: ${{ secrets.APPLE_CERTIFICATE_P12 }}
      run: |
        # Create keychain
        security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain

        # Import certificate
        echo "${{ secrets.APPLE_CERTIFICATE_P12 }}" | base64 -d > certificate.p12
        security import certificate.p12 -k build.keychain -P "${{ secrets.CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain

        # List certificates for verification
        security find-identity -v -p codesigning build.keychain

    - name: Sign application (if certificate available)
      if: ${{ secrets.APPLE_CERTIFICATE_P12 }}
      run: |
        codesign --deep --force --verify --verbose \
          --sign "${{ secrets.DEVELOPER_ID_APPLICATION }}" \
          --entitlements entitlements.plist \
          --options runtime \
          "$PRODUCT_NAME.app"

    - name: Verify code signature (if signed)
      if: ${{ secrets.APPLE_CERTIFICATE_P12 }}
      run: |
        codesign --verify --verbose=2 "$PRODUCT_NAME.app"
        spctl --assess --verbose=2 "$PRODUCT_NAME.app"

    - name: Create DMG
      run: |
        # Create temporary DMG directory
        mkdir dmg_temp
        cp -R "$PRODUCT_NAME.app" dmg_temp/

        # Create symbolic link to Applications
        ln -s /Applications dmg_temp/Applications

        # Create DMG
        hdiutil create -volname "$PRODUCT_NAME" \
          -srcfolder dmg_temp \
          -ov -format UDZO \
          "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}.dmg"

    - name: Create PKG installer
      run: |
        # Create package structure
        mkdir -p pkg_build/Applications
        cp -R "$PRODUCT_NAME.app" pkg_build/Applications/

        # Build the package
        pkgbuild --root pkg_build \
          --identifier "$BUNDLE_ID.pkg" \
          --version "${{ steps.version.outputs.VERSION }}" \
          --install-location "/" \
          "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}.pkg"

    - name: Sign PKG (if certificate available)
      if: ${{ secrets.APPLE_CERTIFICATE_P12 }}
      run: |
        productsign --sign "${{ secrets.DEVELOPER_ID_INSTALLER }}" \
          "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}.pkg" \
          "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}-signed.pkg"
        mv "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}-signed.pkg" \
           "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}.pkg"

    - name: Notarize DMG and PKG (if certificate available)
      if: ${{ secrets.APPLE_CERTIFICATE_P12 && secrets.APPLE_ID && secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      run: |
        # Notarize DMG
        xcrun notarytool submit "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}.dmg" \
          --apple-id "${{ secrets.APPLE_ID }}" \
          --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" \
          --team-id "${{ secrets.APPLE_TEAM_ID }}" \
          --wait

        # Notarize PKG
        xcrun notarytool submit "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}.pkg" \
          --apple-id "${{ secrets.APPLE_ID }}" \
          --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" \
          --team-id "${{ secrets.APPLE_TEAM_ID }}" \
          --wait

        # Staple notarization
        xcrun stapler staple "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}.dmg"
        xcrun stapler staple "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}.pkg"

    - name: Create App Store build (preparation)
      run: |
        echo "App Store submission requires Xcode project with proper provisioning profiles"
        echo "Consider converting to Xcode project for App Store distribution"

        # Create app store entitlements
        cat > "appstore-entitlements.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>com.apple.security.app-sandbox</key>
            <true/>
            <key>com.apple.security.network.client</key>
            <true/>
            <key>com.apple.security.files.user-selected.read-write</key>
            <true/>
        </dict>
        </plist>
        EOF

    - name: Generate checksums
      run: |
        shasum -a 256 "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}.dmg" > checksums.txt
        shasum -a 256 "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}.pkg" >> checksums.txt

    - name: Create release notes
      run: |
        cat > RELEASE_NOTES.md << EOF
        # PingMonitor v${{ steps.version.outputs.VERSION }}

        ## New Features
        - Real-time network monitoring with beautiful graphs
        - Multi-host ping monitoring (Google DNS, Cloudflare, Default Gateway)
        - Native macOS menu bar integration
        - Interactive SwiftUI interface
        - Smart default gateway detection

        ## Installation

        ### Option 1: DMG (Recommended)
        1. Download \`$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}.dmg\`
        2. Open the DMG and drag PingMonitor.app to Applications
        3. Launch from Applications folder

        ### Option 2: PKG Installer
        1. Download \`$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}.pkg\`
        2. Double-click to install
        3. Launch from Applications folder

        ## System Requirements
        - macOS 13.0 or later
        - Network permissions for ping operations

        ## Usage
        - **Left-click** menu bar icon: Open full interface
        - **Right-click** menu bar icon: Quick host selection
        - Click host tabs to switch monitoring targets
        - Use gear menu for settings and export

        ## Security
        This release is code-signed and notarized for security.

        ## Checksums
        \`\`\`
        $(cat checksums.txt)
        \`\`\`
        EOF

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: PingMonitor-${{ steps.version.outputs.VERSION }}
        path: |
          PingMonitor-${{ steps.version.outputs.VERSION }}.dmg
          PingMonitor-${{ steps.version.outputs.VERSION }}.pkg
          checksums.txt
          RELEASE_NOTES.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          PingMonitor-${{ steps.version.outputs.VERSION }}.dmg
          PingMonitor-${{ steps.version.outputs.VERSION }}.pkg
          checksums.txt
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Clean up keychain
      if: always() && secrets.APPLE_CERTIFICATE_P12
      run: |
        security delete-keychain build.keychain || true