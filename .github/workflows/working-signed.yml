name: Working Signed Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.2.0)'
        required: true
        default: '1.2.0'

env:
  PRODUCT_NAME: "PingMonitor"
  BUNDLE_ID: "com.pingmonitor.app"

jobs:
  build-signed-release:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: version
      run: |
        echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT

    - name: Setup certificates
      env:
        APPLE_CERT_DATA: ${{ secrets.APPLE_CERTIFICATE_P12 }}
        APPLE_CERT_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        INSTALLER_CERT_DATA: ${{ secrets.APPLE_INSTALLER_P12 }}
      run: |
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        KEYCHAIN_PASSWORD="temp-keychain-password"

        # Create keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # Import app certificate with tool access
        echo -n "$APPLE_CERT_DATA" | base64 --decode -o $RUNNER_TEMP/app_cert.p12
        security import $RUNNER_TEMP/app_cert.p12 -P "$APPLE_CERT_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH -T /usr/bin/codesign

        # Import installer certificate with tool access
        echo -n "$INSTALLER_CERT_DATA" | base64 --decode -o $RUNNER_TEMP/installer_cert.p12
        security import $RUNNER_TEMP/installer_cert.p12 -P "$APPLE_CERT_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH -T /usr/bin/productsign

        # Skip key partition list for now as it's failing in CI

        security list-keychain -d user -s $KEYCHAIN_PATH

        # Find identities
        echo "=== Available identities ==="
        security find-identity -v -p codesigning $KEYCHAIN_PATH

        # Use SHA-1 hashes directly as we know them from our debugging
        echo "APP_IDENTITY=AFA28ED237DAFF049E872C803CE219300FC444C9" >> $GITHUB_ENV
        echo "INSTALLER_IDENTITY=A59492B7106E24BAF5B1B42DCEB45FCEF1B959DE" >> $GITHUB_ENV
        echo "KEYCHAIN_PATH=$KEYCHAIN_PATH" >> $GITHUB_ENV

        echo "Using hardcoded SHA-1 identities from previous debugging"
        echo "App identity: AFA28ED237DAFF049E872C803CE219300FC444C9"
        echo "Installer identity: A59492B7106E24BAF5B1B42DCEB45FCEF1B959DE"

    - name: Build Universal Binary
      run: |
        swiftc PingMonitor.swift -o PingMonitor-arm64 -target arm64-apple-macos13.0 -Osize
        swiftc PingMonitor.swift -o PingMonitor-x86_64 -target x86_64-apple-macos13.0 -Osize
        lipo -create -output PingMonitor PingMonitor-arm64 PingMonitor-x86_64
        lipo -archs PingMonitor

    - name: Create App Bundle
      run: |
        mkdir -p "$PRODUCT_NAME.app/Contents/MacOS"
        cp PingMonitor "$PRODUCT_NAME.app/Contents/MacOS/"

        cat > "$PRODUCT_NAME.app/Contents/Info.plist" << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>PingMonitor</string>
            <key>CFBundleIdentifier</key>
            <string>com.pingmonitor.app</string>
            <key>CFBundleName</key>
            <string>PingMonitor</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>1.2.0</string>
            <key>CFBundleVersion</key>
            <string>1.2.0</string>
            <key>LSMinimumSystemVersion</key>
            <string>13.0</string>
            <key>LSUIElement</key>
            <true/>
            <key>NSPrincipalClass</key>
            <string>NSApplication</string>
        </dict>
        </plist>
        EOF

    - name: Create Entitlements
      run: |
        cat > "$RUNNER_TEMP/entitlements.plist" << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>com.apple.security.app-sandbox</key>
            <true/>
            <key>com.apple.security.network.client</key>
            <true/>
            <key>com.apple.security.files.user-selected.read-write</key>
            <true/>
        </dict>
        </plist>
        EOF

    - name: Sign Application
      run: |
        echo "Signing with: $APP_IDENTITY"
        if [ -z "$APP_IDENTITY" ]; then
          echo "❌ No signing identity found!"
          exit 1
        fi

        codesign --deep --force --verify --verbose \
          --sign "$APP_IDENTITY" \
          --entitlements $RUNNER_TEMP/entitlements.plist \
          --options runtime \
          "$PRODUCT_NAME.app"

        codesign --verify --verbose=2 "$PRODUCT_NAME.app"
        echo "✅ Application signed successfully!"

    - name: Create and Sign PKG
      run: |
        mkdir -p pkg_staging/Applications
        cp -R "$PRODUCT_NAME.app" pkg_staging/Applications/

        pkgbuild --root pkg_staging \
          --identifier "$BUNDLE_ID.installer" \
          --version "${{ steps.version.outputs.VERSION }}" \
          --install-location "/" \
          "unsigned.pkg"

        if [ -n "$INSTALLER_IDENTITY" ]; then
          echo "Signing PKG with: $INSTALLER_IDENTITY"
          productsign --sign "$INSTALLER_IDENTITY" \
            "unsigned.pkg" \
            "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}-signed.pkg"
        else
          echo "⚠️ No installer identity, keeping unsigned PKG"
          mv "unsigned.pkg" "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}-signed.pkg"
        fi

    - name: Create DMG
      run: |
        mkdir dmg_staging
        cp -R "$PRODUCT_NAME.app" dmg_staging/
        ln -s /Applications dmg_staging/Applications
        hdiutil create -volname "$PRODUCT_NAME v${{ steps.version.outputs.VERSION }}" \
          -srcfolder dmg_staging \
          -ov -format UDZO \
          "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}-signed.dmg"

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: PingMonitor-v${{ steps.version.outputs.VERSION }}-Signed
        path: |
          PingMonitor-${{ steps.version.outputs.VERSION }}-signed.dmg
          PingMonitor-${{ steps.version.outputs.VERSION }}-signed.pkg

    - name: Clean up
      if: always()
      run: |
        security delete-keychain $KEYCHAIN_PATH || true
        rm -f $RUNNER_TEMP/app_cert.p12 $RUNNER_TEMP/installer_cert.p12 || true