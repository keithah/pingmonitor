name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.1.0)'
        required: true
        default: '1.1.0'

env:
  PRODUCT_NAME: "PingMonitor"
  BUNDLE_ID: "com.pingmonitor.app"

jobs:
  build-signed-release:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Get version
      id: version
      run: |
        echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT

    - name: Import signing certificates
      run: |
        security create-keychain -p "build-keychain-pass" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "build-keychain-pass" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain

        echo "${{ secrets.APPLE_CERTIFICATE_P12 }}" | base64 -d > app_cert.p12
        echo "${{ secrets.APPLE_INSTALLER_P12 }}" | base64 -d > installer_cert.p12

        security import app_cert.p12 -k build.keychain -P "${{ secrets.CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign -T /usr/bin/productsign -A
        security import installer_cert.p12 -k build.keychain -P "${{ secrets.CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign -T /usr/bin/productsign -A

        # Set key partition list to allow access
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "build-keychain-pass" build.keychain

        # Verify keychain is unlocked and accessible
        security unlock-keychain -p "build-keychain-pass" build.keychain
        security list-keychains -d user -s build.keychain

        security find-identity -v build.keychain

        # List all certificates for debugging
        echo "=== All certificates in keychain ==="
        security find-certificate -a build.keychain | grep "labl" || echo "No certificates found with labl"

        # List all identities (valid and invalid)
        echo "=== All identities ==="
        security find-identity build.keychain || echo "No identities found"

        # Try to find the exact signing identity
        SIGNING_ID=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application" | head -1 | cut -d '"' -f 2 || echo "")
        INSTALLER_ID=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Installer" | head -1 | cut -d '"' -f 2 || echo "")

        echo "Found signing identity: $SIGNING_ID"
        echo "Found installer identity: $INSTALLER_ID"

        if [ -z "$SIGNING_ID" ]; then
          echo "❌ No signing identity found! Using fallback..."
          SIGNING_ID="Mac Developer ID Application: Keith Herrington"
        fi

        if [ -z "$INSTALLER_ID" ]; then
          echo "❌ No installer identity found! Using fallback..."
          INSTALLER_ID="Mac Developer ID Installer: Keith Herrington"
        fi

        echo "SIGNING_IDENTITY=$SIGNING_ID" >> $GITHUB_ENV
        echo "INSTALLER_IDENTITY=$INSTALLER_ID" >> $GITHUB_ENV

    - name: Build Universal Binary
      run: |
        swiftc PingMonitor.swift -o PingMonitor-arm64 -target arm64-apple-macos13.0 -Osize
        swiftc PingMonitor.swift -o PingMonitor-x86_64 -target x86_64-apple-macos13.0 -Osize
        lipo -create -output PingMonitor PingMonitor-arm64 PingMonitor-x86_64
        lipo -archs PingMonitor

    - name: Create App Bundle
      run: |
        mkdir -p "$PRODUCT_NAME.app/Contents/MacOS"
        cp PingMonitor "$PRODUCT_NAME.app/Contents/MacOS/"

        cat > "$PRODUCT_NAME.app/Contents/Info.plist" << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>PingMonitor</string>
            <key>CFBundleIdentifier</key>
            <string>com.pingmonitor.app</string>
            <key>CFBundleName</key>
            <string>PingMonitor</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>1.1.0</string>
            <key>CFBundleVersion</key>
            <string>1.1.0</string>
            <key>LSMinimumSystemVersion</key>
            <string>13.0</string>
            <key>LSUIElement</key>
            <true/>
            <key>NSPrincipalClass</key>
            <string>NSApplication</string>
        </dict>
        </plist>
        EOF

    - name: Create Entitlements
      run: |
        cat > "entitlements.plist" << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>com.apple.security.app-sandbox</key>
            <true/>
            <key>com.apple.security.network.client</key>
            <true/>
            <key>com.apple.security.files.user-selected.read-write</key>
            <true/>
        </dict>
        </plist>
        EOF

    - name: Sign Application
      run: |
        echo "Signing with: $SIGNING_IDENTITY"
        codesign --deep --force --verify --verbose --sign "$SIGNING_IDENTITY" --entitlements entitlements.plist --options runtime "$PRODUCT_NAME.app"

    - name: Create DMG and PKG
      run: |
        mkdir dmg_staging
        cp -R "$PRODUCT_NAME.app" dmg_staging/
        ln -s /Applications dmg_staging/Applications
        hdiutil create -volname "PingMonitor v1.1.0" -srcfolder dmg_staging -ov -format UDZO "PingMonitor-1.1.0-signed.dmg"

        mkdir -p pkg_staging/Applications
        cp -R "$PRODUCT_NAME.app" pkg_staging/Applications/
        pkgbuild --root pkg_staging --identifier "$BUNDLE_ID.installer" --version "1.1.0" --install-location "/" "unsigned.pkg"
        productsign --sign "$INSTALLER_IDENTITY" "unsigned.pkg" "PingMonitor-1.1.0-signed.pkg"

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: PingMonitor-1.1.0-Signed
        path: |
          PingMonitor-1.1.0-signed.dmg
          PingMonitor-1.1.0-signed.pkg

    - name: Clean up
      if: always()
      run: |
        security delete-keychain build.keychain || true
        rm -f app_cert.p12 installer_cert.p12 || true