name: Simple Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PRODUCT_NAME: "PingScope"
  PRODUCT_DISPLAY_NAME: "PingScope - Stay Connected!"
  BUNDLE_ID: "com.hadm.pingmonitor"

jobs:
  build:
    runs-on: macos-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set version
      id: version
      run: |
        # Use commit short SHA as version for builds
        VERSION=$(git rev-parse --short HEAD)
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Using version: $VERSION"

    - name: Build Universal Binary
      run: |
        swiftc PingMonitor/PingMonitor.swift -o PingScope-arm64 -target arm64-apple-macos13.0 -Osize
        swiftc PingMonitor/PingMonitor.swift -o PingScope-x86_64 -target x86_64-apple-macos13.0 -Osize
        lipo -create -output PingScope PingScope-arm64 PingScope-x86_64
        lipo -archs PingScope
        echo "✅ Universal binary created"

    - name: Create App Bundle
      run: |
        mkdir -p "$PRODUCT_NAME.app/Contents/MacOS"
        cp PingScope "$PRODUCT_NAME.app/Contents/MacOS/"

        cat > "$PRODUCT_NAME.app/Contents/Info.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>$PRODUCT_NAME</string>
            <key>CFBundleIdentifier</key>
            <string>$BUNDLE_ID</string>
            <key>CFBundleName</key>
            <string>$PRODUCT_DISPLAY_NAME</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>${{ steps.version.outputs.VERSION }}</string>
            <key>CFBundleVersion</key>
            <string>${{ steps.version.outputs.VERSION }}</string>
            <key>LSMinimumSystemVersion</key>
            <string>13.0</string>
            <key>LSUIElement</key>
            <true/>
            <key>NSPrincipalClass</key>
            <string>NSApplication</string>
            <key>NSHighResolutionCapable</key>
            <true/>
            <key>NSSupportsAutomaticGraphicsSwitching</key>
            <true/>
            <key>NSRequiresAquaSystemAppearance</key>
            <false/>
        </dict>
        </plist>
        EOF
        echo "✅ App bundle created"

    - name: Create Entitlements for Local Signing
      run: |
        cat > "entitlements.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>com.apple.security.app-sandbox</key>
            <true/>
            <key>com.apple.security.network.client</key>
            <true/>
            <key>com.apple.security.files.user-selected.read-write</key>
            <true/>
            <key>com.apple.security.cs.allow-jit</key>
            <false/>
            <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
            <false/>
            <key>com.apple.security.cs.disable-executable-page-protection</key>
            <false/>
        </dict>
        </plist>
        EOF

    - name: Create DMG
      run: |
        rm -rf dmg_staging
        mkdir dmg_staging
        cp -R "$PRODUCT_NAME.app" dmg_staging/
        ln -s /Applications dmg_staging/Applications
        hdiutil create -volname "$PRODUCT_NAME v${{ steps.version.outputs.VERSION }} (Unsigned)" \
          -srcfolder dmg_staging \
          -ov -format UDZO \
          "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}-unsigned.dmg"
        echo "✅ DMG created"

    - name: Create PKG
      run: |
        rm -rf pkg_staging
        mkdir -p pkg_staging/Applications
        cp -R "$PRODUCT_NAME.app" pkg_staging/Applications/
        pkgbuild --root pkg_staging \
          --identifier "com.pingmonitor.app.installer" \
          --version "${{ steps.version.outputs.VERSION }}" \
          --install-location "/" \
          "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}-unsigned.pkg"
        echo "✅ PKG created"

    - name: Create Local Signing Instructions
      run: |
        cat > "SIGNING_INSTRUCTIONS.md" << EOF
        # Local Signing Instructions

        ## What's Included
        - \`$PRODUCT_NAME.app\` - Unsigned app bundle ready for signing
        - \`entitlements.plist\` - Entitlements file for sandboxed signing
        - \`$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}-unsigned.dmg\` - Unsigned DMG
        - \`$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}-unsigned.pkg\` - Unsigned PKG

        ## Sign the App Bundle
        \`\`\`bash
        # Sign the app (this command worked in our testing)
        codesign --deep --force --verify --verbose \\
          --sign "Developer ID Application: Keith Herrington (6R7S5GA944)" \\
          --entitlements entitlements.plist \\
          --options runtime \\
          "$PRODUCT_NAME.app"

        # Verify signing
        codesign --verify --verbose=2 "$PRODUCT_NAME.app"
        spctl --assess --verbose=2 "$PRODUCT_NAME.app"
        \`\`\`

        ## Sign the PKG (if needed)
        \`\`\`bash
        # Re-create and sign PKG with signed app
        rm -rf pkg_staging
        mkdir -p pkg_staging/Applications
        cp -R "$PRODUCT_NAME.app" pkg_staging/Applications/
        pkgbuild --root pkg_staging \\
          --identifier "com.pingmonitor.app.installer" \\
          --version "${{ steps.version.outputs.VERSION }}" \\
          --install-location "/" \\
          "unsigned.pkg"

        # Sign the PKG
        productsign --sign "Developer ID Installer: Keith Herrington (6R7S5GA944)" \\
          "unsigned.pkg" \\
          "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}-signed.pkg"
        \`\`\`

        ## Create Signed DMG
        \`\`\`bash
        # Create new DMG with signed app
        rm -rf dmg_staging
        mkdir dmg_staging
        cp -R "$PRODUCT_NAME.app" dmg_staging/
        ln -s /Applications dmg_staging/Applications
        hdiutil create -volname "$PRODUCT_NAME v${{ steps.version.outputs.VERSION }}" \\
          -srcfolder dmg_staging \\
          -ov -format UDZO \\
          "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}-signed.dmg"
        \`\`\`

        ## Notarize (Optional)
        \`\`\`bash
        # Submit for notarization
        xcrun notarytool submit "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}-signed.dmg" \\
          --apple-id "your-apple-id@example.com" \\
          --password "your-app-specific-password" \\
          --team-id "6R7S5GA944" \\
          --wait

        # Staple notarization ticket
        xcrun stapler staple "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}-signed.dmg"
        \`\`\`
        EOF

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: PingMonitor-v${{ steps.version.outputs.VERSION }}-ReadyToSign
        path: |
          PingMonitor.app
          entitlements.plist
          PingMonitor-${{ steps.version.outputs.VERSION }}-unsigned.dmg
          PingMonitor-${{ steps.version.outputs.VERSION }}-unsigned.pkg
          SIGNING_INSTRUCTIONS.md