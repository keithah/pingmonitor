name: Official Signed Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.2.0)'
        required: true
        default: '1.2.0'

env:
  PRODUCT_NAME: "PingMonitor"
  BUNDLE_ID: "com.pingmonitor.app"

jobs:
  build-signed-release:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        fi

    - name: Install the Apple certificate
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_P12 }}
        P12_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD || 'temp-keychain-password' }}
      run: |
        # create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import certificate from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

        # create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # Find signing identity
        SIGNING_IDENTITY=$(security find-identity -v -p codesigning $KEYCHAIN_PATH | grep "Developer ID Application" | head -1 | cut -d '"' -f 2)
        echo "SIGNING_IDENTITY=$SIGNING_IDENTITY" >> $GITHUB_ENV
        echo "Found signing identity: $SIGNING_IDENTITY"

    - name: Build Universal Binary
      run: |
        swiftc PingMonitor.swift -o PingMonitor-arm64 -target arm64-apple-macos13.0 -Osize
        swiftc PingMonitor.swift -o PingMonitor-x86_64 -target x86_64-apple-macos13.0 -Osize
        lipo -create -output PingMonitor PingMonitor-arm64 PingMonitor-x86_64
        lipo -archs PingMonitor

    - name: Create App Bundle
      run: |
        mkdir -p "$PRODUCT_NAME.app/Contents/MacOS"
        cp PingMonitor "$PRODUCT_NAME.app/Contents/MacOS/"

        cat > "$PRODUCT_NAME.app/Contents/Info.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>$PRODUCT_NAME</string>
            <key>CFBundleIdentifier</key>
            <string>$BUNDLE_ID</string>
            <key>CFBundleName</key>
            <string>$PRODUCT_NAME</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>CFBundleShortVersionString</key>
            <string>${{ steps.version.outputs.VERSION }}</string>
            <key>CFBundleVersion</key>
            <string>${{ steps.version.outputs.VERSION }}</string>
            <key>LSMinimumSystemVersion</key>
            <string>13.0</string>
            <key>LSUIElement</key>
            <true/>
            <key>NSPrincipalClass</key>
            <string>NSApplication</string>
            <key>NSHighResolutionCapable</key>
            <true/>
            <key>NSSupportsAutomaticGraphicsSwitching</key>
            <true/>
            <key>NSRequiresAquaSystemAppearance</key>
            <false/>
        </dict>
        </plist>
        EOF

    - name: Create Entitlements
      run: |
        cat > "$RUNNER_TEMP/entitlements.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>com.apple.security.app-sandbox</key>
            <true/>
            <key>com.apple.security.network.client</key>
            <true/>
            <key>com.apple.security.files.user-selected.read-write</key>
            <true/>
            <key>com.apple.security.cs.allow-jit</key>
            <false/>
            <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
            <false/>
            <key>com.apple.security.cs.disable-executable-page-protection</key>
            <false/>
        </dict>
        </plist>
        EOF

    - name: Sign Application
      run: |
        echo "Signing with: $SIGNING_IDENTITY"
        codesign --deep --force --verify --verbose \
          --sign "$SIGNING_IDENTITY" \
          --entitlements $RUNNER_TEMP/entitlements.plist \
          --options runtime \
          "$PRODUCT_NAME.app"

    - name: Verify Signature
      run: |
        codesign --verify --verbose=2 "$PRODUCT_NAME.app"
        spctl --assess --verbose=2 "$PRODUCT_NAME.app"
        echo "✅ Application signed successfully!"

    - name: Create DMG
      run: |
        mkdir dmg_staging
        cp -R "$PRODUCT_NAME.app" dmg_staging/
        ln -s /Applications dmg_staging/Applications
        hdiutil create -volname "$PRODUCT_NAME v${{ steps.version.outputs.VERSION }}" \
          -srcfolder dmg_staging \
          -ov -format UDZO \
          "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}-signed.dmg"

    - name: Install Installer Certificate
      env:
        INSTALLER_CERTIFICATE_BASE64: ${{ secrets.APPLE_INSTALLER_P12 }}
        P12_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD || 'temp-keychain-password' }}
      run: |
        INSTALLER_CERT_PATH=$RUNNER_TEMP/installer_certificate.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # import installer certificate
        echo -n "$INSTALLER_CERTIFICATE_BASE64" | base64 --decode -o $INSTALLER_CERT_PATH
        security import $INSTALLER_CERT_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH

        # Find installer identity
        INSTALLER_IDENTITY=$(security find-identity -v -p codesigning $KEYCHAIN_PATH | grep "Developer ID Installer" | head -1 | cut -d '"' -f 2)
        echo "INSTALLER_IDENTITY=$INSTALLER_IDENTITY" >> $GITHUB_ENV
        echo "Found installer identity: $INSTALLER_IDENTITY"

    - name: Create and Sign PKG
      run: |
        mkdir -p pkg_staging/Applications
        cp -R "$PRODUCT_NAME.app" pkg_staging/Applications/
        pkgbuild --root pkg_staging \
          --identifier "$BUNDLE_ID.installer" \
          --version "${{ steps.version.outputs.VERSION }}" \
          --install-location "/" \
          "unsigned.pkg"

        echo "Signing PKG with: $INSTALLER_IDENTITY"
        productsign --sign "$INSTALLER_IDENTITY" \
          "unsigned.pkg" \
          "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}-signed.pkg"

    - name: Notarize (if credentials available)
      if: ${{ secrets.APPLE_ID && secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      run: |
        echo "🔐 Starting notarization process..."

        # Notarize DMG
        xcrun notarytool submit "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}-signed.dmg" \
          --apple-id "${{ secrets.APPLE_ID }}" \
          --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" \
          --team-id "${{ secrets.APPLE_TEAM_ID }}" \
          --wait \
          --timeout 10m || echo "DMG notarization failed, continuing..."

        # Notarize PKG
        xcrun notarytool submit "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}-signed.pkg" \
          --apple-id "${{ secrets.APPLE_ID }}" \
          --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" \
          --team-id "${{ secrets.APPLE_TEAM_ID }}" \
          --wait \
          --timeout 10m || echo "PKG notarization failed, continuing..."

        # Staple notarization tickets
        xcrun stapler staple "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}-signed.dmg" || echo "DMG stapling failed"
        xcrun stapler staple "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}-signed.pkg" || echo "PKG stapling failed"

        echo "✅ Notarization process completed!"

    - name: Generate Checksums
      run: |
        shasum -a 256 "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}-signed.dmg" > checksums.txt
        shasum -a 256 "$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}-signed.pkg" >> checksums.txt

    - name: Create Release Notes
      run: |
        cat > RELEASE_NOTES.md << EOF
        # 🎉 PingMonitor v${{ steps.version.outputs.VERSION }} - Code Signed Release

        ## ✨ What's New
        - **🔐 Code Signed & Notarized**: Fully signed by Apple Developer ID for security
        - **🌍 Universal Binary**: Native performance on both Apple Silicon and Intel Macs
        - **📊 Real-time Network Monitoring**: Beautiful graphs and detailed ping history
        - **⚙️ Complete Settings Interface**: Add, edit, and remove custom hosts
        - **📁 Data Export**: Export monitoring data in CSV, JSON, and Text formats
        - **🖱️ Enhanced Interaction**: Ctrl+Click and Cmd+Click support for context menu

        ## 📦 Installation Options

        ### 🖥️ DMG Installer (Recommended)
        1. Download **\`$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}-signed.dmg\`**
        2. Open the DMG file
        3. Drag PingMonitor.app to your Applications folder
        4. Launch from Applications

        ### 📦 PKG Installer
        1. Download **\`$PRODUCT_NAME-${{ steps.version.outputs.VERSION }}-signed.pkg\`**
        2. Double-click to run the installer
        3. Follow the installation prompts
        4. Launch from Applications

        ## 🖥️ System Requirements
        - **macOS 13.0** or later (Ventura, Sonoma, Sequoia)
        - **Universal Binary** - works on all Mac architectures
        - Network permissions for ping operations

        ## 🔒 Security & Trust
        - ✅ **Code Signed** with Apple Developer ID
        - ✅ **Notarized** by Apple (malware scanned)
        - ✅ **Gatekeeper Approved** - no security warnings
        - 🆔 **Developer**: Keith Herrington (6R7S5GA944)

        ## 🎮 Usage
        - **Left-click** menu bar icon: Open full monitoring interface
        - **Right-click/Ctrl+Click/Cmd+Click**: Quick context menu
        - **Settings**: Comprehensive host management
        - **Export**: Generate detailed reports

        ## 🔍 File Integrity
        **SHA-256 Checksums:**
        \`\`\`
        $(cat checksums.txt)
        \`\`\`

        ---
        **PingMonitor** - Professional network monitoring for macOS 🚀
        EOF

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: PingMonitor-v${{ steps.version.outputs.VERSION }}-Signed
        path: |
          PingMonitor-${{ steps.version.outputs.VERSION }}-signed.dmg
          PingMonitor-${{ steps.version.outputs.VERSION }}-signed.pkg
          checksums.txt
          RELEASE_NOTES.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          PingMonitor-${{ steps.version.outputs.VERSION }}-signed.dmg
          PingMonitor-${{ steps.version.outputs.VERSION }}-signed.pkg
          checksums.txt
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
        name: "PingMonitor v${{ steps.version.outputs.VERSION }} - Code Signed"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Clean up keychain and provisioning profile
      if: ${{ always() }}
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
        rm -f $RUNNER_TEMP/build_certificate.p12
        rm -f $RUNNER_TEMP/installer_certificate.p12